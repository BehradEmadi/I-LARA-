import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error as mse
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from tensorflow.keras.optimizers import Adam

# Set a random seed for reproducibility
np.random.seed(121)

# File paths
DATA_PATH = 'path for importing data.xlsx'
MODEL_SAVE_PATH = 'path for saving the model.h5'
PREDICTION_SAVE_PATH = 'path for saving the result.xlsx'
Y_TEST_RESHAPED_SAVE_PATH = 'reshaping the test data set path.xlsx'
TEST_DATA_X_SAVE_PATH = 'reshaping the test data set path.xlsx'

# Load and preprocess data
def load_and_preprocess_data(filepath):
    df = pd.read_excel(filepath)
    df = df.iloc[:145000]  # Adjust the range as necessary
    input_data = df[['LARAz_1', 'PCBz_2', 'LARAz_4', 'PCBz_3', 'LARAz_5', 'PCBz_6']]
    output_data = df[['PCBz_1', 'PCBz_4', 'PCBz_5']]
    return input_data, output_data

# Normalize data
def normalize_data(input_data):
    scaler = StandardScaler()
    normalized_input = scaler.fit_transform(input_data)
    return normalized_input, scaler

# Create sequences
def create_sequences(input_data, output_data, time_steps):
    input_seq, output_seq = [], []
    for i in range(len(input_data) - time_steps + 1):
        input_seq.append(input_data[i:i + time_steps])
        output_seq.append(output_data[i:i + time_steps])
    return np.array(input_seq), np.array(output_seq)

# Define and compile the model
def build_lstm_model(time_steps, features, learning_rate=0.001):
    model = Sequential()
    model.add(LSTM(units=30, return_sequences=True, input_shape=(time_steps, features)))
    model.add(LSTM(units=30, return_sequences=True, activation='relu'))
    model.add(LSTM(units=30, return_sequences=True, activation='relu'))
    model.add(LSTM(units=30, activation='relu'))
    model.add(Dense(units=3, activation='linear'))

    optimizer = Adam(learning_rate=learning_rate)
    model.compile(optimizer=optimizer, loss='mean_squared_error')
    return model

# Train the model
def train_model(model, X_data, Y_data, epochs=20, batch_size=1):
    model.fit(X_data, Y_data, epochs=epochs, batch_size=batch_size)
    return model

# Evaluate the model
def evaluate_model(model, X_test, Y_test):
    y_test_reshaped = Y_test[:, -1, :]
    predictions = model.predict(X_test)
    mse_value = mse(y_test_reshaped, predictions)
    return mse_value, predictions, y_test_reshaped

# Save the model and predictions
def save_results(model, predictions, y_test_reshaped, test_data_x):
    model.save(MODEL_SAVE_PATH)

    df_predictions = pd.DataFrame(predictions)
    df_predictions.to_excel(PREDICTION_SAVE_PATH, index=False)

    df_y_test_reshaped = pd.DataFrame(y_test_reshaped)
    df_y_test_reshaped.to_excel(Y_TEST_RESHAPED_SAVE_PATH, index=False)

    df_test_data_x = pd.DataFrame(test_data_x)
    df_test_data_x.to_excel(TEST_DATA_X_SAVE_PATH, index=False)

# Main execution workflow
if __name__ == "__main__":
    time_steps = 5

    # Load and preprocess data
    input_data, output_data = load_and_preprocess_data(DATA_PATH)
    input_data_normalized, scaler = normalize_data(input_data)
    output_data_np = output_data.values

    # Create sequences
    X_data, Y_data = create_sequences(input_data_normalized, output_data_np, time_steps)
    X_data = X_data.reshape(X_data.shape[0], X_data.shape[1], X_data.shape[2])
    Y_data = Y_data.reshape(Y_data.shape[0], Y_data.shape[1], Y_data.shape[2])

    # Build and train the model
    model = build_lstm_model(time_steps, X_data.shape[2])
    model = train_model(model, X_data, Y_data)

    # Evaluate the model on test data
    selected_data = pd.read_excel(DATA_PATH).iloc[145000:180000]
    test_data_x = selected_data[['LARAz_1', 'PCBz_2', 'LARAz_4', 'PCBz_3', 'LARAz_5', 'PCBz_6']]
    test_data_y = selected_data[['PCBz_1', 'PCBz_4', 'PCBz_5']]
    mean_test_x = selected_data[['LARAz_1', 'LARAz_4', 'LARAz_5']]

    mean_error = mse(mean_test_x, test_data_y)
    print(f"Mean Error: {mean_error}")

    test_data_x_normalized = scaler.transform(test_data_x)
    X_test, Y_test = create_sequences(test_data_x_normalized, test_data_y.values, time_steps)
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2])
    Y_test = Y_test.reshape(Y_test.shape[0], Y_test.shape[1], Y_test.shape[2])

    mse_value, predictions, y_test_reshaped = evaluate_model(model, X_test, Y_test)
    print(f"Test MSE: {mse_value}")

    # Save the model and results
    save_results(model, predictions, y_test_reshaped, test_data_x)
